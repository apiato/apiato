{
    "openapi": "3.0.2",
    "info": {
        "title": "apiato",
        "description": "<details><summary>General Info</summary>  \n## Usage Overview\n\nHere are some information that should help you understand the basic usage of our RESTful API. \nIncluding info about authenticating users, making requests, responses, potential errors, rate limiting, pagination, query parameters and more.\n\n## Headers\n\nCertain API calls require you to send data in a particular format as part of the API call. \nBy default, all API calls expect input in `JSON` format, however, you need to inform the server that you are sending a JSON-formatted payload.\nAnd to do that you must include the `Accept => application/json` HTTP header with every call.\n\n\n| Header        | Value Sample                        | When to send it                                                              |\n|---------------|-------------------------------------|------------------------------------------------------------------------------|\n| Accept        | `application/json`                  | MUST be sent with every endpoint.                                            |\n| Content-Type  | `application/x-www-form-urlencoded` | MUST be sent when passing Data.                                              |\n| Authorization | `Bearer {Access-Token-Here}`        | MUST be sent whenever the endpoint requires (Authenticated User).            |\n\n## Rate limiting\n\nAll REST API requests are throttled to prevent abuse and ensure stability. \nThe exact number of calls that your application can make per day varies based on the type of request you are making.\n\nThe rate limit window is `1` minutes per endpoint, with most individual calls allowing for `30` requests in each window.\n\n*In other words, each user is allowed to make `30` calls per endpoint every `1` minutes. (For each unique access token).*\n\nFor how many hits you can perform on an endpoint, you can always check the header:\n\n```\nX-RateLimit-Limit → 30\nX-RateLimit-Remaining → 29\n```\n\n## Tokens\n\nThe Access Token lives for `1 days, 0 hours, 0 minutes and 0 seconds`. (equivalent to `1440` minutes).\nWhile the Refresh Token lives for `30 days, 0 hours, 0 minutes and 0 seconds`. (equivalent to `43200` minutes).\n\n*You will need to re-authenticate the user when the token expires.*\n\n## Pagination\n\nBy default, all fetch requests return the first `10` items in the list. Check the **Query Parameters** for how to control the pagination.\n\n### Limit\n\nThe `?limit=` parameter can be applied to define, how many records should be returned by the endpoint (see also `Pagination`!).\n\n```\nhttp://api.apiato.test/v1/endpoint?limit=100\n```\n\nThe above example returns 100 resources. \n\nThe `limit` and `page` query parameters can be combined in order to get the next 100 resources:\n\n```\nhttp://api.apiato.test/v1/endpoint?limit=100&page=2\n```\n\nYou can skip the pagination limit to get all the data, by adding `?limit=0`, this will only work if 'skip pagination' is enabled on the server.\n\n## Responses\n\nUnless otherwise specified, all API endpoints will return the information that you request in the JSON data format.\n\n#### Standard Response Format\n\n```json\n{\n  \"data\": {\n    \"object\": \"Role\",\n    \"id\": \"owpmaymq\",\n    \"name\": \"admin\",\n    \"description\": \"Administrator\",\n    \"display_name\": null,\n    \"permissions\": {\n      \"data\": [\n        {\n          \"object\": \"Permission\",\n          \"id\": \"wkxmdazl\",\n          \"name\": \"update_users\",\n          \"description\": \"Update a User.\",\n          \"display_name\": null\n        },\n        {\n          \"object\": \"Permission\",\n          \"id\": \"qrvzpjzb\",\n          \"name\": \"delete_users\",\n          \"description\": \"Delete a User.\",\n          \"display_name\": null\n        }\n      ]\n    }\n  }\n}\n```\n\n#### Header\n\nHeader Response:\n\n```\nContent-Type → application/json\nDate → Thu, 14 Feb 2014 22:33:55 GMT\nETag → \"9c83bf4cf0d09c34782572727281b85879dd4ff6\"\nServer → nginx\nTransfer-Encoding → chunked\nX-Powered-By → PHP/7.0.9\nX-RateLimit-Limit → 100\nX-RateLimit-Remaining → 99\n```\n\n## Query Parameters\n\nQuery parameters are optional, you can apply them to some endpoints whenever you need them.\n\n### Ordering\n\nThe `?orderBy=` parameter can be applied to any **`GET`** HTTP request responsible for ordering the listing of the records by a field.\n\n```\nhttp://api.apiato.test/v1/endpoint?orderBy=created_at\n```\n\n### Sorting\n\nThe `?sortedBy=` parameter is usually used with the `orderBy` parameter.\n\nBy default, the `orderBy` sorts the data in **ascending** order, if you want the data sorted in **descending** order, you can add `&sortedBy=desc`.\n\n```\nhttp://api.apiato.test/v1/endpoint?orderBy=name&sortedBy=desc\n```\n\nOrder By Accepts:\n\n- `asc` for Ascending.\n- `desc` for Descending.\n\n### Searching\n\nIf the [RequestCriteria](http://apiato.io/docs/core-features/query-parameters#using-the-request-criteria)\nis enabled on a route then the `?search=` parameter can be applied to **`GET`** HTTP requests on that specific route.\n\n**Usage:**\n\n#### Search any field:\n\n```\nhttp://api.apiato.test/v1/endpoint?search=keyword here\n```\n\n> Space should be replaced with `%20` (search=keyword%20here).\n\n#### Search any field for multiple keywords:\n\n```\nhttp://api.apiato.test/v1/endpoint?search=first keyword;second keyword\n```\n\n#### Search in a specific field:\n```\nhttp://api.apiato.test/v1/endpoint?search=field:keyword here\n```\n\n#### Search in specific fields for multiple keywords: \n```\nhttp://api.apiato.test/v1/endpoint?search=field1:first field keyword;field2:second field keyword\n```\n\n#### Define query condition:\n\n```\nhttp://api.apiato.test/v1/endpoint?search=field:keyword&searchFields=name:like\n```\n\nAvailable Conditions: \n\n- `like`: string like the field. (SQL query `%keyword%`).\n- `=`: string exact match.\n\n#### Define query condition for multiple fields:\n\n```\nhttp://api.apiato.test/v1/endpoint?search=field1:first keyword;field2:second keyword&searchFields=field1:like;field2:=;\n```\n\n#### Search Join:\nBy default, search makes its queries using the OR comparison operator for each query parameter.\n\n```\nhttp://api.apiato.test/v1/endpoint?search=age:17;email:john@gmail.com\n```\n\nThe above example will execute the following query:\n\n```sql\nSELECT * FROM users WHERE age = 17 OR email = 'john@gmail.com';\n```\nIn order for it to query using the AND, pass the `searchJoin` parameter as shown below:\n\n```\nhttp://api.apiato.test/v1/endpoint?search=age:17;email:john@gmail.com&searchJoin=and\n```\n\n### Filtering\n\nThe `?filter=` parameter can be applied to any HTTP request. And is used to control the response size, by defining what data you want back in the response.\n\nReturn only ID and Status from the Model:\n\n```\nhttp://api.apiato.test/v1/endpoint?filter=id;status\n```\n\nExample Response, including only id and status:\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"0one37vjk49rp5ym\",\n      \"status\": \"approved\",\n      \"products\": {\n        \"data\": [\n          {\n            \"id\": \"bmo7y84xpgeza06k\",\n            \"status\": \"pending\"\n          },\n          {\n            \"id\": \"o0wzxbg0q4k7jp9d\",\n            \"status\": \"fulfilled\"\n          }\n        ]\n      },\n      \"recipients\": {\n        \"data\": [\n          {\n            \"id\": \"r6lbekg8rv5ozyad\"\n          }\n        ]\n      },\n      \"store\": {\n        \"data\": {\n          \"id\": \"r6lbekg8rv5ozyad\"\n        }\n      }\n    }\n  ]\n}\n```\n\n### Paginating\n\nThe `?page=` parameter can be applied to any **`GET`** HTTP request responsible for listing records (mainly for Paginated data).\n\n```\nhttp://api.apiato.test/v1/endpoint?page=200\n```\n\n*The pagination object is always returned in the **meta** when pagination is available on the endpoint.*\n\n```json\n  \"data\": [...],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 2000,\n      \"count\": 30,\n      \"per_page\": 30,\n      \"current_page\": 22,\n      \"total_pages\": 1111,\n      \"links\": {\n        \"previous\": \"http://http://api.apiato.test/v1/endpoint?page=21\"\n      }\n    }\n  }\n```\n\n### Relationships\n\nThe `?include=` parameter can be used with any endpoint, only if it supports it. \n\nHow to use it: let's say there's a Driver object and Car object. And there's an endpoint `/cars` that returns all the cars objects. \nThe include allows getting the cars with their drivers `/cars?include=drivers`. \n\nHowever, for this parameter to work, the endpoint `/cars` should clearly define that it\naccepts `driver` as relationship (in the **Available Relationships** section).\n\n```\nhttp://api.apiato.test/v1/endpoint?include=relationship\n```\n\nEvery response contains an `include` in its `meta`  as follow:\n\n```\n\"meta\":{\n  \"include\":[\n     \"relationship-1\",\n     \"relationship-2\",\n  ],\n```\n\n### Caching\n\nSome endpoints store their response data in memory (caching) after querying them for the first time, to speed up the response time.\nThe `?skipCache=` parameter can be used to force skip loading the response data from the server cache and instead get a fresh data from the database upon the request.\n\n```\nhttp://api.apiato.test/v1/endpoint?skipCache=true\n```\n\n## Requests\n\nCalling unprotected endpoint example:\n\n```shell\ncurl -X POST -H \"Accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded; -F \"email=admin@praisecharts.com\" -F \"password=admin\" -F \"=\" \"http://http://api.apiato.test/v2/register\"\n```\n\nCalling protected endpoint (passing Bearer Token) example:\n\n```shell\ncurl -X GET -H \"Accept: application/json\" -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\" -H \"http://http://api.apiato.test/v1/users\"\n```\n\n</details>",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost",
            "description": "Main server"
        }
    ],
    "paths": {
        "/v1/clients/web/login": {
            "post": {
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EmailPropertySchema"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "format": "password",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 50,
                            "minLength": 2
                        }
                    },
                    {
                        "name": "verification_url",
                        "in": "query",
                        "schema": {
                            "enum": [
                                "http://localhost/email/verify"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": []
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/users/{user_id}": {
            "patch": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": []
                        }
                    }
                },
                "security": [
                    {
                        "BearerToken": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "OAuth2PasswordGrantSchema": {
                "type": "object",
                "required": [
                    "grant_type",
                    "username",
                    "password",
                    "client_id",
                    "client_secret"
                ],
                "properties": {
                    "grant_type": {
                        "enum": [
                            "password"
                        ],
                        "type": "string"
                    },
                    "username": {
                        "description": "user email",
                        "type": "string",
                        "example": "admin@praisecharts.com"
                    },
                    "password": {
                        "format": "password",
                        "type": "string",
                        "example": "admin"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "client_secret": {
                        "type": "string"
                    },
                    "scope": {
                        "default": "",
                        "type": "string"
                    }
                }
            },
            "RegisterUserSchema": {
                "type": "object",
                "required": [
                    "email",
                    "password",
                    "recaptcha_token"
                ],
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/EmailPropertySchema"
                    },
                    "password": {
                        "description": "min:10|max:64|at least one uppercase and one lowercase letter|at least one number|at least one symbol",
                        "format": "password",
                        "type": "string",
                        "example": "p@a$sw0orDd"
                    },
                    "name": {
                        "description": "min:2|max:50",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "verification_url": {
                        "enum": [
                            "http://localhost/email/verify"
                        ],
                        "type": "string",
                        "nullable": true
                    },
                    "campaign": {
                        "type": "string",
                        "nullable": true
                    },
                    "recaptcha_token": {
                        "type": "string"
                    }
                }
            },
            "ForgotPasswordSchema": {
                "type": "object",
                "required": [
                    "email",
                    "reseturl"
                ],
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/EmailPropertySchema"
                    },
                    "reseturl": {
                        "enum": [
                            "http://localhost/password/reset"
                        ],
                        "type": "string",
                        "example": "http://localhost/password/reset"
                    }
                }
            },
            "ResetPasswordSchema": {
                "type": "object",
                "required": [
                    "email",
                    "password",
                    "token"
                ],
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/EmailPropertySchema"
                    },
                    "password": {
                        "description": "min:10|max:64|at least one uppercase and one lowercase letter|at least one number|at least one symbol",
                        "format": "password",
                        "type": "string",
                        "example": "p@a$sw0orDd"
                    },
                    "token": {
                        "description": "required",
                        "type": "string"
                    },
                    "login_after_reset": {
                        "description": "If true, the user will be logged in after resetting the password",
                        "type": "boolean"
                    }
                }
            },
            "SendVerificationEmailSchema": {
                "type": "object",
                "required": [
                    "verification_url"
                ],
                "properties": {
                    "verification_url": {
                        "description": "required|url|in:\"http://localhost/email/verify\"",
                        "type": "string",
                        "example": "https://example.com/verify-email?token={token}&email={email}"
                    }
                }
            },
            "EmailPropertySchema": {
                "description": "email",
                "type": "string",
                "example": "admin@praisecharts.com"
            },
            "RefreshProxyForWebClientSchema": {
                "type": "object",
                "required": [
                    "refresh_token"
                ],
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    }
                }
            },
            "OAuth2ClientCredentialsGrantSchema": {
                "type": "object",
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret"
                ],
                "properties": {
                    "grant_type": {
                        "enum": [
                            "client_credentials"
                        ],
                        "type": "string"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "client_secret": {
                        "type": "string"
                    },
                    "scope": {
                        "default": "",
                        "type": "string"
                    }
                }
            },
            "OAuth2RefreshTokenSchema": {
                "type": "object",
                "required": [
                    "grant_type",
                    "refresh_token",
                    "client_id",
                    "client_secret"
                ],
                "properties": {
                    "grant_type": {
                        "enum": [
                            "refresh_token"
                        ],
                        "type": "string"
                    },
                    "refresh_token": {
                        "type": "string"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "client_secret": {
                        "type": "string"
                    },
                    "scope": {
                        "default": "",
                        "type": "string"
                    }
                }
            },
            "LoginProxyForWebClientSchema": {
                "type": "object",
                "required": [
                    "email",
                    "password",
                    "recaptcha_token"
                ],
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/EmailPropertySchema"
                    },
                    "password": {
                        "format": "password",
                        "type": "string",
                        "example": "admin"
                    },
                    "recaptcha_token": {
                        "type": "string"
                    }
                }
            },
            "UpdateUserPasswordSchema": {
                "type": "object",
                "required": [
                    "new_password"
                ],
                "properties": {
                    "current_password": {
                        "type": "string"
                    },
                    "new_password": {
                        "type": "string"
                    }
                }
            },
            "UserTransformerIncludesSchema": {
                "type": "array",
                "items": {
                    "enum": [
                        "roles",
                        "permissions"
                    ],
                    "type": "string"
                }
            },
            "UpdateUserSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "min:2|max:50",
                        "type": "string"
                    }
                }
            },
            "UserTransformerSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "User"
                    },
                    "id": {
                        "type": "string",
                        "example": "5z3v5g"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@doe.com"
                    },
                    "email_verified_at": {
                        "type": "string",
                        "example": "2021-08-18T15:00:00.000000Z"
                    }
                }
            }
        },
        "securitySchemes": {
            "OAuth2PasswordClientCredentials": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "authorizationUrl": "http://localhost/oauth2/authorize",
                        "tokenUrl": "http://localhost/oauth2/grants/password/token",
                        "refreshUrl": "http://localhost/oauth2/refresh",
                        "scopes": {
                            "read": "Read access",
                            "write": "Write access"
                        }
                    }
                }
            },
            "BearerToken": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "security": [
        {
            "BearerToken": []
        },
        {
            "OAuth2PasswordClientCredentials": []
        }
    ],
    "tags": [
        {
            "name": "Authentication",
            "description": "Authentication operations"
        },
        {
            "name": "User",
            "description": "User operations"
        }
    ]
}